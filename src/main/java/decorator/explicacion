-te permite modificar un objeto dinamicamente
-lo podes usar cuando queres la capacidad de heredar con subclases, pero necesitas agregar funcionalidad en runtime
-es mas flexible que la herencia (usa composicion en vez de herencia)
-simplifica el codigo porque agregas funcionalidad usando clases simples
-en vez de reescribir el codigo viejo lo extendes con nuevo codigo

En el ejemlo quiero tener diferentes tipos de pizzas, con descripciones y valores distintos.
Si creo una clase abstracta y hago que despues todas las clases hijas extiendan y sobrescriban sus metodos estaria bien
pero tendria que crear muchas clases hijas todas con misma logica pero distintos valores.
Si uso composicion en vez de herencia, esto se vuelve mucho mas dinamico.  (con interfaz y decorator)
Voy a tener una interfaz Pizza que va a tener los metodos para obtener la descripcion y valor.
Despues creo una clase PlainPizza que va a ser la pizza comun sin nada.
Creo una clase ToppingDecorator que va a ser la que tenga como atributo una Pizza perot ambien implemente la interfaz.
Creo ahora las clases que van a ser los tipos de pizza que van a extener a ToppingDecorator.
Hago otra vez los metodos de obtener descripcion y valor pero ahora agregandoles ya a lo que hacian un + con lo nuevo del tipo.
Es importante que en el constructor se recibe una Pizza otre vez, entonces cuando hago new de un tipo voy encadenando los tipos que
quiero y se van sumando sus descripciones y costos.